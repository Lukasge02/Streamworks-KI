#!/bin/bash

# StreamWorks Automation Agent - XML Generation & Workflow Specialist
echo "üè≠ StreamWorks Automation Agent Activated"
echo "   Specialized in: XML generation, StreamWorks workflows, enterprise automation"
echo ""

# Get the task parameter
TASK="${1:-analyze}"

case "$TASK" in
    "analyze"|"analysis")
        echo "üìä StreamWorks System Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI
        
        echo "üîç StreamWorks Components:"
        
        # Check XML generation services
        if [ -f "backend/services/streamworks_xml_generator.py" ]; then
            echo "   ‚úÖ XML Generator: streamworks_xml_generator.py"
            LINES=$(wc -l < backend/services/streamworks_xml_generator.py)
            echo "      Size: $LINES lines"
        fi
        
        if [ -f "backend/services/xml_chunking_service.py" ]; then
            echo "   ‚úÖ XML Chunking: xml_chunking_service.py"
            CHUNKS=$(grep -c "chunk" backend/services/xml_chunking_service.py 2>/dev/null || echo "0")
            echo "      Chunking operations: $CHUNKS"
        fi
        
        if [ -f "backend/services/xml_models.py" ]; then
            echo "   ‚úÖ XML Models: xml_models.py"
            MODELS=$(grep -c "class " backend/services/xml_models.py 2>/dev/null || echo "0")
            echo "      Data models: $MODELS"
        fi
        
        if [ -f "backend/services/xml_rag_service.py" ]; then
            echo "   ‚úÖ XML RAG Service: xml_rag_service.py"
            RAG_OPS=$(grep -c "rag\|retrieve\|generate" backend/services/xml_rag_service.py 2>/dev/null || echo "0")
            echo "      RAG operations: $RAG_OPS"
        fi
        
        echo ""
        echo "üìÅ Export Streams:"
        if [ -d "Export-Streams" ]; then
            EXPORT_COUNT=$(find Export-Streams -name "*.xml" | wc -l)
            echo "   XML Templates: $EXPORT_COUNT files"
            
            # Analyze stream categories
            for category in "Export" "Import" "Anforderungen" "Beispiele"; do
                if [ -d "Export-Streams/$category" ]; then
                    COUNT=$(find "Export-Streams/$category" -type f | wc -l)
                    echo "     ‚Ä¢ $category: $COUNT files"
                fi
            done
        fi
        
        echo ""
        echo "üõ£Ô∏è Automation Routes:"
        if [ -d "backend/routes" ]; then
            for route in "xml_streams.py" "simple_streams.py"; do
                if [ -f "backend/routes/$route" ]; then
                    ENDPOINTS=$(grep -c "@.*\\.get\|@.*\\.post\|@.*\\.put\|@.*\\.delete" "backend/routes/$route" 2>/dev/null || echo "0")
                    echo "   ‚Ä¢ ${route}: ${ENDPOINTS} endpoints"
                fi
            done
        fi
        ;;
        
    "generate")
        echo "üîß XML Generation Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        if [ -f "services/streamworks_xml_generator.py" ]; then
            echo "üîç XML Generator Capabilities:"
            
            # Analyze generator functions
            GENERATE_FUNCTIONS=$(grep -c "def generate_" services/streamworks_xml_generator.py 2>/dev/null || echo "0")
            echo "   Generation functions: $GENERATE_FUNCTIONS"
            
            TEMPLATE_USAGE=$(grep -c "template\|jinja" services/streamworks_xml_generator.py 2>/dev/null || echo "0")
            echo "   Template operations: $TEMPLATE_USAGE"
            
            VALIDATION=$(grep -c "validate\|schema\|xsd" services/streamworks_xml_generator.py 2>/dev/null || echo "0")
            echo "   Validation patterns: $VALIDATION"
            
            echo ""
            echo "üí° Generation Patterns:"
            echo "   ‚Ä¢ Template-based XML generation"
            echo "   ‚Ä¢ Schema validation and compliance"
            echo "   ‚Ä¢ Dynamic workflow parameter injection"
            echo "   ‚Ä¢ Multi-tenant configuration support"
        else
            echo "   ‚ö†Ô∏è XML generator not found - creating basic structure..."
        fi
        ;;
        
    "workflows")
        echo "‚öôÔ∏è Workflow Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI
        
        echo "üîç Workflow Components:"
        
        # Check for workflow definitions
        if [ -d "Export-Streams/Export" ]; then
            WORKFLOW_DIRS=$(find Export-Streams/Export -maxdepth 1 -type d | grep -v "^Export-Streams/Export$" | wc -l)
            echo "   Workflow directories: $WORKFLOW_DIRS"
            
            # Sample workflow analysis
            for workflow_dir in Export-Streams/Export/*/; do
                if [ -d "$workflow_dir" ]; then
                    workflow_name=$(basename "$workflow_dir")
                    XML_COUNT=$(find "$workflow_dir" -name "*.xml" | wc -l)
                    if [ $XML_COUNT -gt 0 ]; then
                        echo "     ‚Ä¢ ${workflow_name}: ${XML_COUNT} XML files"
                    fi
                fi
            done | head -5
        fi
        
        echo ""
        echo "üéØ Workflow Automation Opportunities:"
        echo "   ‚Ä¢ Batch XML generation from templates"
        echo "   ‚Ä¢ Workflow validation and testing"
        echo "   ‚Ä¢ Parameter injection automation"
        echo "   ‚Ä¢ Export/Import cycle automation"
        ;;
        
    "migrate")
        echo "üîÑ Migration Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        if [ -f "services/xml_migration_service.py" ]; then
            echo "üìã Migration Service Analysis:"
            
            MIGRATION_FUNCTIONS=$(grep -c "def " services/xml_migration_service.py 2>/dev/null || echo "0")
            echo "   Migration functions: $MIGRATION_FUNCTIONS"
            
            ASYNC_OPS=$(grep -c "async " services/xml_migration_service.py 2>/dev/null || echo "0")
            echo "   Async operations: $ASYNC_OPS"
            
            ERROR_HANDLING=$(grep -c "try\|except\|error" services/xml_migration_service.py 2>/dev/null || echo "0")
            echo "   Error handling patterns: $ERROR_HANDLING"
            
            echo ""
            echo "üéØ Migration Capabilities:"
            echo "   ‚Ä¢ Legacy XML format conversion"
            echo "   ‚Ä¢ Batch processing with progress tracking"
            echo "   ‚Ä¢ Validation and rollback support"
            echo "   ‚Ä¢ Enterprise data migration workflows"
        else
            echo "   ‚ö†Ô∏è xml_migration_service.py not found"
        fi
        ;;
        
    "test")
        echo "üß™ StreamWorks Testing..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        # Test XML generation pipeline
        echo "üîß Testing XML Pipeline:"
        if [ -f "test_xml_pipeline.py" ]; then
            echo "   ‚úÖ XML Pipeline Tests: test_xml_pipeline.py"
            
            # Run basic test if Python is available
            if command -v python3 &> /dev/null; then
                echo ""
                echo "Running XML pipeline validation..."
                python3 test_xml_pipeline.py > /tmp/xml-test.log 2>&1
                
                if [ $? -eq 0 ]; then
                    echo "   ‚úÖ XML Pipeline: PASSED"
                else
                    echo "   ‚ö†Ô∏è XML Pipeline: Issues detected"
                    tail -5 /tmp/xml-test.log 2>/dev/null
                fi
            fi
        else
            echo "   ‚ö†Ô∏è test_xml_pipeline.py not found"
        fi
        
        echo ""
        echo "üìä System Integration Test:"
        # Test backend connectivity
        if curl -s -m 3 http://localhost:8000/health > /dev/null; then
            echo "   ‚úÖ Backend: Online"
            
            # Test XML endpoints if they exist
            XML_ENDPOINTS=(
                "/api/v1/xml/generate"
                "/api/v1/streams/simple"
                "/api/v1/streams/xml"
            )
            
            for endpoint in "${XML_ENDPOINTS[@]}"; do
                if curl -s -m 2 "http://localhost:8000$endpoint" > /dev/null 2>&1; then
                    echo "   ‚úÖ $endpoint: Accessible"
                else
                    echo "   ‚ùì $endpoint: Not accessible"
                fi
            done
        else
            echo "   ‚ùå Backend: Offline"
        fi
        ;;
        
    *)
        echo "üìö StreamWorks Automation Agent Usage:"
        echo ""
        echo "Available commands:"
        echo "   /streamworks-automation analyze     - Complete StreamWorks analysis"
        echo "   /streamworks-automation generate    - XML generation capabilities"
        echo "   /streamworks-automation workflows   - Workflow automation analysis"
        echo "   /streamworks-automation migrate     - Migration service analysis"
        echo "   /streamworks-automation test        - System integration testing"
        echo ""
        echo "üéØ Specializations:"
        echo "   ‚Ä¢ StreamWorks XML generation and templating"
        echo "   ‚Ä¢ Enterprise workflow automation"
        echo "   ‚Ä¢ Legacy system migration and conversion"
        echo "   ‚Ä¢ Batch processing and data transformation"
        echo "   ‚Ä¢ Integration testing and validation"
        ;;
esac

echo ""
echo "‚úÖ StreamWorks Automation analysis complete!"