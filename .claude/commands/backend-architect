#!/bin/bash

# Backend Architect Agent - StreamWorks FastAPI Architecture Specialist  
echo "üèóÔ∏è Backend Architect Agent Activated"
echo "   Specialized in: FastAPI architecture, database optimization, enterprise integration"
echo ""

# Get the task parameter
TASK="${1:-analyze}"

case "$TASK" in
    "analyze"|"analysis")
        echo "üìä Backend Architecture Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        echo "üîç Core Architecture Components:"
        
        if [ -f "main.py" ]; then
            echo "   ‚úÖ FastAPI App: main.py"
            ROUTES=$(grep -c "router\|APIRouter" main.py 2>/dev/null || echo "0")
            echo "      Registered routes: $ROUTES"
        fi
        
        if [ -f "config.py" ]; then
            echo "   ‚úÖ Configuration: config.py"
            CONFIGS=$(grep -c "=" config.py 2>/dev/null || echo "0")
            echo "      Config parameters: $CONFIGS"
        fi
        
        if [ -f "database.py" -o -f "database/connection.py" ]; then
            echo "   ‚úÖ Database Layer: Available"
            if [ -d "database" ]; then
                DB_FILES=$(find database -name "*.py" | wc -l)
                echo "      Database files: $DB_FILES"
            fi
        fi
        
        echo ""
        echo "üìÅ Service Architecture:"
        if [ -d "services" ]; then
            SERVICE_COUNT=$(find services -name "*.py" | wc -l)
            echo "   Services: $SERVICE_COUNT modules"
            
            # Key services analysis
            for service in "rag_pipeline" "enterprise_cache" "vectorstore" "embeddings" "docling_ingest"; do
                if [ -f "services/${service}.py" ]; then
                    LINES=$(wc -l < "services/${service}.py")
                    echo "     ‚Ä¢ ${service}: ${LINES} lines"
                fi
            done
        fi
        
        echo ""
        echo "üõ£Ô∏è API Routes:"
        if [ -d "routes" ]; then
            ROUTE_COUNT=$(find routes -name "*.py" | wc -l)
            echo "   Route modules: $ROUTE_COUNT"
            
            for route_file in routes/*.py; do
                if [ -f "$route_file" ]; then
                    route_name=$(basename "$route_file" .py)
                    ENDPOINTS=$(grep -c "@.*\.get\|@.*\.post\|@.*\.put\|@.*\.delete" "$route_file" 2>/dev/null || echo "0")
                    echo "     ‚Ä¢ ${route_name}: ${ENDPOINTS} endpoints"
                fi
            done
        fi
        ;;
        
    "health")
        echo "ü©∫ Backend Health Analysis..."
        echo ""
        
        # Check if backend is running
        if curl -s -m 3 http://localhost:8000/health > /dev/null; then
            echo "‚úÖ Backend Status: HEALTHY"
            
            # Get health response
            HEALTH_RESPONSE=$(curl -s http://localhost:8000/health 2>/dev/null)
            echo "   Response: $HEALTH_RESPONSE"
            
            # Test response time
            RESPONSE_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:8000/health)
            echo "   Response Time: ${RESPONSE_TIME}s"
            
            # Test multiple endpoints
            echo ""
            echo "üß™ Endpoint Testing:"
            
            ENDPOINTS=(
                "/health:Health Check"
                "/docs:OpenAPI Docs" 
                "/api/v1:API v1"
            )
            
            for endpoint_info in "${ENDPOINTS[@]}"; do
                IFS=':' read -r path name <<< "$endpoint_info"
                if curl -s -m 2 "http://localhost:8000$path" > /dev/null 2>&1; then
                    echo "   ‚úÖ $name ($path)"
                else
                    echo "   ‚ùå $name ($path) - Not accessible"
                fi
            done
            
        else
            echo "‚ùå Backend Status: OFFLINE"
            echo "   ‚Ä¢ Check if uvicorn is running on port 8000"
            echo "   ‚Ä¢ Use '/dev-start' to start the backend"
        fi
        ;;
        
    "database")
        echo "üóÑÔ∏è Database Architecture Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        # Check database configuration
        if [ -f "config.py" ]; then
            echo "üîç Database Configuration:"
            DB_CONFIGS=$(grep -i "database\|db_\|postgres\|sqlite" config.py 2>/dev/null || echo "")
            if [ -n "$DB_CONFIGS" ]; then
                echo "$DB_CONFIGS" | head -5
            else
                echo "   No explicit database config found"
            fi
        fi
        
        echo ""
        echo "üìä Database Models:"
        if [ -d "models" ]; then
            MODEL_COUNT=$(find models -name "*.py" | wc -l)
            echo "   Model files: $MODEL_COUNT"
            
            for model_file in models/*.py; do
                if [ -f "$model_file" ] && [ "$(basename "$model_file")" != "__init__.py" ]; then
                    model_name=$(basename "$model_file" .py)
                    CLASSES=$(grep -c "^class " "$model_file" 2>/dev/null || echo "0")
                    echo "     ‚Ä¢ ${model_name}: ${CLASSES} models"
                fi
            done
        fi
        
        echo ""
        echo "üîÑ Migrations:"
        if [ -d "migrations" ]; then
            MIGRATION_COUNT=$(find migrations -name "*.py" | grep -v "__" | wc -l)
            echo "   Migration files: $MIGRATION_COUNT"
        else
            echo "   No migrations directory found"
        fi
        ;;
        
    "performance")
        echo "‚ö° Performance Architecture Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        echo "üîç Async Implementation:"
        ASYNC_FUNCTIONS=$(find . -name "*.py" -exec grep -l "async def" {} \; | wc -l)
        echo "   Files with async functions: $ASYNC_FUNCTIONS"
        
        AWAIT_CALLS=$(find . -name "*.py" -exec grep -c "await " {} \; | awk '{sum+=$1} END {print sum}')
        echo "   Total await calls: ${AWAIT_CALLS:-0}"
        
        echo ""
        echo "üöÄ Performance Patterns:"
        
        # Check for caching
        CACHE_USAGE=$(find . -name "*.py" -exec grep -l -i "cache\|redis\|lru" {} \; | wc -l)
        echo "   Files using caching: $CACHE_USAGE"
        
        # Check for connection pooling
        POOL_USAGE=$(find . -name "*.py" -exec grep -l -i "pool\|connection" {} \; | wc -l)
        echo "   Files with connection handling: $POOL_USAGE"
        
        # Check for background tasks
        BACKGROUND_TASKS=$(find . -name "*.py" -exec grep -c "BackgroundTask\|background" {} \; | awk '{sum+=$1} END {print sum}')
        echo "   Background task implementations: ${BACKGROUND_TASKS:-0}"
        ;;
        
    "security") 
        echo "üîí Security Architecture Analysis..."
        echo ""
        
        cd /Applications/Programmieren/Visual\ Studio/Bachelorarbeit/Streamworks-KI/backend
        
        echo "üõ°Ô∏è Security Implementations:"
        
        # Check for authentication
        AUTH_PATTERNS=$(find . -name "*.py" -exec grep -c -i "auth\|token\|jwt\|oauth" {} \; | awk '{sum+=$1} END {print sum}')
        echo "   Authentication patterns: ${AUTH_PATTERNS:-0}"
        
        # Check for validation
        VALIDATION=$(find . -name "*.py" -exec grep -c -i "pydantic\|validate\|schema" {} \; | awk '{sum+=$1} END {print sum}')
        echo "   Validation implementations: ${VALIDATION:-0}"
        
        # Check for CORS
        CORS_CONFIG=$(find . -name "*.py" -exec grep -l -i "cors\|origin" {} \; | wc -l)
        echo "   CORS configuration files: $CORS_CONFIG"
        
        # Check for rate limiting  
        RATE_LIMITING=$(find . -name "*.py" -exec grep -c -i "rate.*limit\|throttle" {} \; | awk '{sum+=$1} END {print sum}')
        echo "   Rate limiting patterns: ${RATE_LIMITING:-0}"
        ;;
        
    *)
        echo "üìö Backend Architect Agent Usage:"
        echo ""
        echo "Available commands:"
        echo "   /backend-architect analyze      - Complete architecture analysis"
        echo "   /backend-architect health       - Backend health and connectivity"
        echo "   /backend-architect database     - Database layer analysis"
        echo "   /backend-architect performance  - Performance patterns audit"
        echo "   /backend-architect security     - Security implementation review"
        echo ""
        echo "üéØ Specializations:"
        echo "   ‚Ä¢ FastAPI architecture optimization"
        echo "   ‚Ä¢ Database design and performance"
        echo "   ‚Ä¢ Enterprise integration patterns"
        echo "   ‚Ä¢ Async programming and scalability"
        echo "   ‚Ä¢ Security and compliance implementation"
        ;;
esac

echo ""
echo "‚úÖ Backend Architect analysis complete!"