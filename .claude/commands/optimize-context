#!/bin/bash

# Optimize Context - Smart context management and cleanup
echo "üß† Optimizing Claude Code context for better performance and cost efficiency..."

echo ""
echo "üîç Step 1: Analyzing current context usage"
if [ -f "../.claude/tool-use.log" ]; then
    LOG_ENTRIES=$(wc -l < ../.claude/tool-use.log)
    echo "   Tool operations logged: $LOG_ENTRIES"
    
    # Check for large operations
    LARGE_OPS=$(grep -c '"size":[0-9][0-9][0-9][0-9][0-9]' ../.claude/tool-use.log 2>/dev/null || echo "0")
    echo "   Large operations (>10KB): $LARGE_OPS"
    
    # Recent activity
    echo "   Recent activity (last hour):"
    HOUR_AGO=$(date -d '1 hour ago' -Iseconds 2>/dev/null || date -v-1H -Iseconds 2>/dev/null || echo "$(date -Iseconds)")
    grep "$HOUR_AGO" ../.claude/tool-use.log 2>/dev/null | wc -l | xargs echo "     Operations in last hour:"
else
    echo "   ‚ö†Ô∏è No tool usage log found"
fi

echo ""
echo "üßπ Step 2: Context cleanup recommendations"
echo "   Current session analysis:"

# Check git status for uncommitted changes
if git status --porcelain 2>/dev/null | head -10 | wc -l | grep -q "^0$"; then
    echo "   ‚úÖ Clean working directory - good time for /clear"
else
    CHANGES=$(git status --porcelain 2>/dev/null | wc -l)
    echo "   ‚ö†Ô∏è $CHANGES uncommitted changes - consider committing before /clear"
fi

# Check for running development servers
if lsof -i :8000 > /dev/null 2>&1 || lsof -i :3000 > /dev/null 2>&1; then
    echo "   ‚ö†Ô∏è Development servers running - active development session"
else
    echo "   ‚úÖ No active development servers - good for major context reset"
fi

echo ""
echo "üéØ Step 3: Context optimization strategies"
echo "   Recommended actions:"
echo "   1. Strategic /clear usage:"
echo "      ‚Ä¢ After completing features or major bug fixes"
echo "      ‚Ä¢ When switching between frontend/backend work"
echo "      ‚Ä¢ After large refactoring sessions"
echo ""
echo "   2. Agent-specific work:"
echo "      ‚Ä¢ Use specialized agents for focused tasks"
echo "      ‚Ä¢ Delegate complex workflows to appropriate agents"
echo "      ‚Ä¢ Break large tasks into agent-specific subtasks"
echo ""
echo "   3. Efficient prompt patterns:"
echo "      ‚Ä¢ Use custom commands instead of long explanations"
echo "      ‚Ä¢ Reference specific files rather than broad searches"
echo "      ‚Ä¢ Batch related operations together"

echo ""
echo "üìä Step 4: Cost optimization insights"
echo "   Token-efficient practices:"
echo "   ‚Ä¢ Custom commands reduce prompt tokens by ~60%"
echo "   ‚Ä¢ Agent delegation reduces context overhead by ~40%"
echo "   ‚Ä¢ Strategic /clear usage reduces cumulative context costs"
echo "   ‚Ä¢ File-specific operations are more efficient than broad searches"

echo ""
echo "ü§ñ Step 5: Agent utilization recommendations"
echo "   Available specialized agents for cost-efficient work:"
echo "   ‚Ä¢ rag-expert: RAG pipeline optimization and debugging"
echo "   ‚Ä¢ backend-architect: FastAPI and database work"
echo "   ‚Ä¢ frontend-specialist: React/TypeScript development"
echo "   ‚Ä¢ streamworks-automation: XML and workflow automation"
echo "   ‚Ä¢ test-engineer: Testing and quality assurance"
echo "   ‚Ä¢ performance-optimizer: Performance tuning and optimization"
echo "   ‚Ä¢ security-auditor: Security analysis and implementation"
echo "   ‚Ä¢ cleanup-specialist: Code cleanup and technical debt"

echo ""
echo "üí° Step 6: Session management recommendations"
if [ "$LOG_ENTRIES" -gt 50 ]; then
    echo "   üü° High activity session ($LOG_ENTRIES operations)"
    echo "      Consider: /clear after current task completion"
elif [ "$LOG_ENTRIES" -gt 20 ]; then
    echo "   üü¢ Moderate activity session ($LOG_ENTRIES operations)"
    echo "      Continue current work, /clear at natural break points"
else
    echo "   üü¢ Fresh session ($LOG_ENTRIES operations)"
    echo "      Good for starting new major tasks"
fi

echo ""
echo "‚úÖ Context optimization analysis complete!"
echo "   üí° Use '/clear' strategically to maintain optimal performance and cost efficiency"