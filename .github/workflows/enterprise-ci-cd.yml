name: 🚀 Enterprise StreamWorks CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly health check

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: streamworks/backend
  IMAGE_NAME_FRONTEND: streamworks/frontend
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Code Quality & Security Checks
  quality-gate:
    name: 🔍 Quality Gate & Security Scan
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements*.txt'
              - 'docker-compose*.yml'
            frontend:
              - 'frontend/**'
              - 'package*.json'

      - name: 🛡️ Security Vulnerability Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON: true
          VALIDATE_TYPESCRIPT: true
          VALIDATE_DOCKER: true
          VALIDATE_YAML: true

      - name: 🔐 Secrets Scan with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Backend Testing & Analysis
  backend-tests:
    name: 🐍 Backend Tests & Analysis
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.backend-changed == 'true' || github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: test
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🧪 Run Unit Tests
        working-directory: ./backend
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0

      - name: 🔗 Run Integration Tests
        working-directory: ./backend
        run: |
          pytest tests/integration/ -v --timeout=30
        env:
          DATABASE_URL: postgresql://test:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: 🔍 Code Quality Analysis
        working-directory: ./backend
        run: |
          black --check .
          isort --check-only .
          flake8 .
          mypy . --ignore-missing-imports

      - name: 🚀 Performance Benchmark
        working-directory: ./backend
        run: |
          python -m pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json

      - name: 📤 Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-benchmarks
          path: ./backend/benchmark.json

  # Frontend Testing & Analysis
  frontend-tests:
    name: ⚛️ Frontend Tests & Analysis
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.frontend-changed == 'true' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Lint & Type Check
        working-directory: ./frontend
        run: |
          npm run lint
          npm run type-check

      - name: 🧪 Run Unit Tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: 📊 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            ./frontend/coverage/

      - name: 🏗️ Build Production Bundle
        working-directory: ./frontend
        run: |
          npm run build
          npm run analyze

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist/

  # Docker Build & Security Scan
  docker-build-scan:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.frontend-tests.result == 'success')
    
    strategy:
      matrix:
        include:
          - context: ./backend
            dockerfile: Dockerfile.production
            image: ${{ env.IMAGE_NAME_BACKEND }}
          - context: ./frontend
            dockerfile: Dockerfile.production
            image: ${{ env.IMAGE_NAME_FRONTEND }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          dockerfile: ${{ matrix.context }}/${{ matrix.dockerfile }}
          target: production
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.image }}:latest
            ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: 🛡️ Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🚀 Push Docker Image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          dockerfile: ${{ matrix.context }}/${{ matrix.dockerfile }}
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.image }}:latest
            ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Load Testing
  load-testing:
    name: ⚡ Load Testing & Performance
    runs-on: ubuntu-latest
    needs: [docker-build-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js for Artillery
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Artillery
        run: npm install -g artillery@latest

      - name: 🐳 Start Test Environment
        run: |
          docker-compose -f docker-compose.production.yml up -d
          sleep 60  # Wait for services to be ready

      - name: ⚡ Run Load Tests
        run: |
          artillery run tests/load/qa-pipeline-load-test.yml --output artillery-report.json
          artillery run tests/load/xml-pipeline-load-test.yml --output artillery-xml-report.json

      - name: 📊 Generate Performance Report
        run: |
          artillery report artillery-report.json --output performance-report.html
          artillery report artillery-xml-report.json --output xml-performance-report.html

      - name: 📤 Upload Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            performance-report.html
            xml-performance-report.html
            artillery-report.json
            artillery-xml-report.json

      - name: 🧹 Cleanup Test Environment
        if: always()
        run: docker-compose -f docker-compose.production.yml down

  # Production Deployment
  deploy-production:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: [load-testing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: ⚙️ Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔐 Configure Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          kubectl config current-context

      - name: 🚀 Deploy to Production
        run: |
          helm upgrade --install streamworks-prod ./k8s/helm/streamworks \
            --namespace streamworks-prod \
            --create-namespace \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.tag=${{ github.sha }} \
            --set global.imageRegistry=${{ env.REGISTRY }} \
            --values ./k8s/helm/streamworks/values.production.yaml

      - name: ✅ Verify Deployment
        run: |
          kubectl rollout status deployment/streamworks-backend -n streamworks-prod --timeout=300s
          kubectl rollout status deployment/streamworks-frontend -n streamworks-prod --timeout=300s

      - name: 🔍 Health Check
        run: |
          sleep 30
          kubectl get pods -n streamworks-prod
          curl -f https://api.streamworks.arvato-systems.com/api/system/health

  # Deployment Notifications
  notify:
    name: 📢 Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📢 Slack Notification - Success
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ StreamWorks Production Deployment Successful!
            🚀 Version: ${{ github.sha }}
            🌐 URL: https://streamworks.arvato-systems.com
            📊 Dashboard: https://grafana.streamworks.arvato-systems.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Slack Notification - Failure
        if: needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ StreamWorks Production Deployment Failed!
            🔍 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}