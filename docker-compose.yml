version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: streamworks-postgres
    environment:
      POSTGRES_USER: streamworks
      POSTGRES_PASSWORD: streamworks2024
      POSTGRES_DB: streamworks_ki
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - streamworks-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streamworks"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: streamworks-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - streamworks-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ChromaDB Vector Store
  chromadb:
    image: chromadb/chroma:latest
    container_name: streamworks-chromadb
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    ports:
      - "8001:8000"
    networks:
      - streamworks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: streamworks-backend
    environment:
      - DATABASE_URL=postgresql://streamworks:streamworks2024@postgres:5432/streamworks_ki
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BACKEND_URL=http://backend:8000
      - DOC_STORE_PATH=/app/storage/documents
      - CHROMA_PATH=/app/storage/chroma
    volumes:
      - ./backend:/app
      - document_storage:/app/storage/documents
      - ./backend/.env:/app/.env
    ports:
      - "8000:8000"
    networks:
      - streamworks-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: streamworks-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - streamworks-network
    depends_on:
      - backend
    command: npm run dev

  # Nginx Reverse Proxy (Optional - f√ºr Production)
  nginx:
    image: nginx:alpine
    container_name: streamworks-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - streamworks-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

networks:
  streamworks-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  document_storage:
    driver: local